// Project Euler problem 45. Triangular, pentagonal, and hexagonal
// Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
//
// Triangle	 	    Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
// Pentagonal	 	Pn=n(3n−1)/2	1, 5, 12, 22, 35, ...
// Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
// It can be verified that T285 = P165 = H143 = 40755.
//
// Find the next triangle number that is also pentagonal and hexagonal.
#include <iostream>

struct NumberState
{
    NumberState(int n_, int dn_, int inc_inc_) : n(n_), dn(dn_), inc_inc(inc_inc_) {}
    int n;
    int dn;
    const int inc_inc;

    void increment() noexcept
    {
        n += dn;
        dn += inc_inc;
    }

    bool operator==(const NumberState &other) const
    {
        return (this->n == other.n);
    }

    bool operator<(const NumberState &other) const
    {
        return this->n < other.n;
    }
};

int pe45()
{
    NumberState t(1, 2, 1);
    NumberState p(1, 4, 3);
    NumberState h(1, 5, 4);
    h.increment();
    while (true)
    {
        if (h == t && h == p)
        {
            if (h.n == 40755)
            {
                h.increment();
            }
            else
            {
                return h.n;
            }
        }
        if (t < h || t < p)
        {
            t.increment();
        }
        if (p < h || p < t)
        {
            p.increment();
        }
        if (h < t || h < p)
        {
            h.increment();
        }
    }
}

int main()
{
    std::cout << pe45() << '\n';
}
