/* projecteuler.net problem 2

Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four
million, find the sum of the even-valued terms.
*/

#include <iostream>

// Return the sum of even fibonacci numbers <= n.
int sum_of_even_valued_fibonacci_numbers_below(int n)
{
    int fib1 = 1;
    int fib2 = 2;
    int total = 0;
    while (fib2 <= n)
    {
        if (fib2 % 2 == 0)
        {
            total += fib2;
        }
        const int next_fib = fib1 + fib2;
        fib1 = fib2;
        fib2 = next_fib;
    }
    return total;
}

bool test_sum_of_even_valued_fibonacci_numbers_below()
{
    struct TestCase
    {
        int n;
        int expected;
    };

    TestCase testCases[] = {
        {1, 0},
        {2, 2},
        {3, 2},
        {10, 10},
        {100, 44},
    };
    bool passed = true;
    for (const auto &tc : testCases)
    {
        const auto actual = sum_of_even_valued_fibonacci_numbers_below(tc.n);
        if (tc.expected != actual)
        {
            passed = false;
            std::cerr << __FILE__ << ":" << __LINE__ << ", FAIL, " << __FUNCTION__
                      << "(n: " << tc.n
                      << "), expected: " << tc.expected << ", actual: " << actual << "\n";
        }
    }
    return passed;
}

int main()
{
    std::cout << sum_of_even_valued_fibonacci_numbers_below(4000000) << '\n';
    return test_sum_of_even_valued_fibonacci_numbers_below() ? 0 : 1;
}
