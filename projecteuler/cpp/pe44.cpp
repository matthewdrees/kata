// Project Euler problem 44. Pentagon numbers.
//
// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
//
// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
//
// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
//
// Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised;
// what is the value of D ?
#include <algorithm>
#include <iostream>
#include <limits>
#include <vector>

// Generate vector of pentagonal numbers <= max.
//
// Pentagonal equation:
//   Pn = n(3n-1)/2
//
// get_pentagonal_numbers(145) -> {1, 5, 12, 22, 35, 51, 70, 92, 117, 145}
//
// \param max: maximum pentagonal value in series.
// \return: vector of pentagonal numbers.
std::vector<int> get_pentagonal_numbers(int max)
{
    std::vector<int> P;
    for (int i = 1; i < std::numeric_limits<int>::max(); ++i)
    {
        int val = i * (3 * i - 1) / 2;
        if (val > max)
        {
            break;
        }
        P.push_back(val);
    }
    return P;
}

// Bailed on figuring out a good name for this function.
int pe44()
{
    const auto P = get_pentagonal_numbers(10000000);
    for (size_t j = 2; j < P.size(); ++j)
    {
        const auto pj = P[j];
        for (size_t k = j + 1; k < P.size(); ++k)
        {
            const auto pk = P[k];
            const auto D = pk - pj;
            if (D < 1)
            {
                break;
            }
            const auto cur = P.begin() + k;
            if (std::binary_search(P.begin(), cur, D) &&
                std::binary_search(cur + 1, P.end(), pk + pj))
            {
                return D;
            }
        }
    }
    return 0;
}

int main()
{
    std::cout << pe44() << '\n';
}
